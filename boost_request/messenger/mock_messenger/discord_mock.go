// Code generated by MockGen. DO NOT EDIT.
// Source: discord.go

// Package mock_messenger is a generated GoMock package.
package mock_messenger

import (
	reflect "reflect"

	discordgo "github.com/bwmarrin/discordgo"
	gomock "github.com/golang/mock/gomock"
)

// MockDiscordSender is a mock of DiscordSender interface.
type MockDiscordSender struct {
	ctrl     *gomock.Controller
	recorder *MockDiscordSenderMockRecorder
}

// MockDiscordSenderMockRecorder is the mock recorder for MockDiscordSender.
type MockDiscordSenderMockRecorder struct {
	mock *MockDiscordSender
}

// NewMockDiscordSender creates a new mock instance.
func NewMockDiscordSender(ctrl *gomock.Controller) *MockDiscordSender {
	mock := &MockDiscordSender{ctrl: ctrl}
	mock.recorder = &MockDiscordSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscordSender) EXPECT() *MockDiscordSenderMockRecorder {
	return m.recorder
}

// ChannelMessageSendComplex mocks base method.
func (m *MockDiscordSender) ChannelMessageSendComplex(channelID string, data *discordgo.MessageSend) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageSendComplex", channelID, data)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendComplex indicates an expected call of ChannelMessageSendComplex.
func (mr *MockDiscordSenderMockRecorder) ChannelMessageSendComplex(channelID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendComplex", reflect.TypeOf((*MockDiscordSender)(nil).ChannelMessageSendComplex), channelID, data)
}

// UserChannelCreate mocks base method.
func (m *MockDiscordSender) UserChannelCreate(recipientID string) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserChannelCreate", recipientID)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserChannelCreate indicates an expected call of UserChannelCreate.
func (mr *MockDiscordSenderMockRecorder) UserChannelCreate(recipientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserChannelCreate", reflect.TypeOf((*MockDiscordSender)(nil).UserChannelCreate), recipientID)
}

// MockDiscordSenderAndDeleter is a mock of DiscordSenderAndDeleter interface.
type MockDiscordSenderAndDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockDiscordSenderAndDeleterMockRecorder
}

// MockDiscordSenderAndDeleterMockRecorder is the mock recorder for MockDiscordSenderAndDeleter.
type MockDiscordSenderAndDeleterMockRecorder struct {
	mock *MockDiscordSenderAndDeleter
}

// NewMockDiscordSenderAndDeleter creates a new mock instance.
func NewMockDiscordSenderAndDeleter(ctrl *gomock.Controller) *MockDiscordSenderAndDeleter {
	mock := &MockDiscordSenderAndDeleter{ctrl: ctrl}
	mock.recorder = &MockDiscordSenderAndDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiscordSenderAndDeleter) EXPECT() *MockDiscordSenderAndDeleterMockRecorder {
	return m.recorder
}

// ChannelMessageDelete mocks base method.
func (m *MockDiscordSenderAndDeleter) ChannelMessageDelete(channelID, messageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageDelete", channelID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelMessageDelete indicates an expected call of ChannelMessageDelete.
func (mr *MockDiscordSenderAndDeleterMockRecorder) ChannelMessageDelete(channelID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageDelete", reflect.TypeOf((*MockDiscordSenderAndDeleter)(nil).ChannelMessageDelete), channelID, messageID)
}

// ChannelMessageSendComplex mocks base method.
func (m *MockDiscordSenderAndDeleter) ChannelMessageSendComplex(channelID string, data *discordgo.MessageSend) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageSendComplex", channelID, data)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendComplex indicates an expected call of ChannelMessageSendComplex.
func (mr *MockDiscordSenderAndDeleterMockRecorder) ChannelMessageSendComplex(channelID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendComplex", reflect.TypeOf((*MockDiscordSenderAndDeleter)(nil).ChannelMessageSendComplex), channelID, data)
}

// UserChannelCreate mocks base method.
func (m *MockDiscordSenderAndDeleter) UserChannelCreate(recipientID string) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserChannelCreate", recipientID)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserChannelCreate indicates an expected call of UserChannelCreate.
func (mr *MockDiscordSenderAndDeleterMockRecorder) UserChannelCreate(recipientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserChannelCreate", reflect.TypeOf((*MockDiscordSenderAndDeleter)(nil).UserChannelCreate), recipientID)
}

// MockdiscordChannelMessageSendComplex is a mock of discordChannelMessageSendComplex interface.
type MockdiscordChannelMessageSendComplex struct {
	ctrl     *gomock.Controller
	recorder *MockdiscordChannelMessageSendComplexMockRecorder
}

// MockdiscordChannelMessageSendComplexMockRecorder is the mock recorder for MockdiscordChannelMessageSendComplex.
type MockdiscordChannelMessageSendComplexMockRecorder struct {
	mock *MockdiscordChannelMessageSendComplex
}

// NewMockdiscordChannelMessageSendComplex creates a new mock instance.
func NewMockdiscordChannelMessageSendComplex(ctrl *gomock.Controller) *MockdiscordChannelMessageSendComplex {
	mock := &MockdiscordChannelMessageSendComplex{ctrl: ctrl}
	mock.recorder = &MockdiscordChannelMessageSendComplexMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdiscordChannelMessageSendComplex) EXPECT() *MockdiscordChannelMessageSendComplexMockRecorder {
	return m.recorder
}

// ChannelMessageSendComplex mocks base method.
func (m *MockdiscordChannelMessageSendComplex) ChannelMessageSendComplex(channelID string, data *discordgo.MessageSend) (*discordgo.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageSendComplex", channelID, data)
	ret0, _ := ret[0].(*discordgo.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelMessageSendComplex indicates an expected call of ChannelMessageSendComplex.
func (mr *MockdiscordChannelMessageSendComplexMockRecorder) ChannelMessageSendComplex(channelID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageSendComplex", reflect.TypeOf((*MockdiscordChannelMessageSendComplex)(nil).ChannelMessageSendComplex), channelID, data)
}

// MockdiscordUserChannelCreate is a mock of discordUserChannelCreate interface.
type MockdiscordUserChannelCreate struct {
	ctrl     *gomock.Controller
	recorder *MockdiscordUserChannelCreateMockRecorder
}

// MockdiscordUserChannelCreateMockRecorder is the mock recorder for MockdiscordUserChannelCreate.
type MockdiscordUserChannelCreateMockRecorder struct {
	mock *MockdiscordUserChannelCreate
}

// NewMockdiscordUserChannelCreate creates a new mock instance.
func NewMockdiscordUserChannelCreate(ctrl *gomock.Controller) *MockdiscordUserChannelCreate {
	mock := &MockdiscordUserChannelCreate{ctrl: ctrl}
	mock.recorder = &MockdiscordUserChannelCreateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdiscordUserChannelCreate) EXPECT() *MockdiscordUserChannelCreateMockRecorder {
	return m.recorder
}

// UserChannelCreate mocks base method.
func (m *MockdiscordUserChannelCreate) UserChannelCreate(recipientID string) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserChannelCreate", recipientID)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserChannelCreate indicates an expected call of UserChannelCreate.
func (mr *MockdiscordUserChannelCreateMockRecorder) UserChannelCreate(recipientID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserChannelCreate", reflect.TypeOf((*MockdiscordUserChannelCreate)(nil).UserChannelCreate), recipientID)
}

// MockdiscordChannelMessageDelete is a mock of discordChannelMessageDelete interface.
type MockdiscordChannelMessageDelete struct {
	ctrl     *gomock.Controller
	recorder *MockdiscordChannelMessageDeleteMockRecorder
}

// MockdiscordChannelMessageDeleteMockRecorder is the mock recorder for MockdiscordChannelMessageDelete.
type MockdiscordChannelMessageDeleteMockRecorder struct {
	mock *MockdiscordChannelMessageDelete
}

// NewMockdiscordChannelMessageDelete creates a new mock instance.
func NewMockdiscordChannelMessageDelete(ctrl *gomock.Controller) *MockdiscordChannelMessageDelete {
	mock := &MockdiscordChannelMessageDelete{ctrl: ctrl}
	mock.recorder = &MockdiscordChannelMessageDeleteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdiscordChannelMessageDelete) EXPECT() *MockdiscordChannelMessageDeleteMockRecorder {
	return m.recorder
}

// ChannelMessageDelete mocks base method.
func (m *MockdiscordChannelMessageDelete) ChannelMessageDelete(channelID, messageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelMessageDelete", channelID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelMessageDelete indicates an expected call of ChannelMessageDelete.
func (mr *MockdiscordChannelMessageDeleteMockRecorder) ChannelMessageDelete(channelID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelMessageDelete", reflect.TypeOf((*MockdiscordChannelMessageDelete)(nil).ChannelMessageDelete), channelID, messageID)
}
