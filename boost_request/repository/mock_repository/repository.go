// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	repository "github.com/oppzippy/BoostRequestBot/boost_request/repository"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AdjustStealCreditsForUser mocks base method.
func (m *MockRepository) AdjustStealCreditsForUser(guildID, userID string, operation repository.Operation, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdjustStealCreditsForUser", guildID, userID, operation, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdjustStealCreditsForUser indicates an expected call of AdjustStealCreditsForUser.
func (mr *MockRepositoryMockRecorder) AdjustStealCreditsForUser(guildID, userID, operation, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdjustStealCreditsForUser", reflect.TypeOf((*MockRepository)(nil).AdjustStealCreditsForUser), guildID, userID, operation, amount)
}

// CancelAutoSignup mocks base method.
func (m *MockRepository) CancelAutoSignup(guildID, advertiserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelAutoSignup", guildID, advertiserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelAutoSignup indicates an expected call of CancelAutoSignup.
func (mr *MockRepositoryMockRecorder) CancelAutoSignup(guildID, advertiserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAutoSignup", reflect.TypeOf((*MockRepository)(nil).CancelAutoSignup), guildID, advertiserID)
}

// DeleteAdvertiserPrivileges mocks base method.
func (m *MockRepository) DeleteAdvertiserPrivileges(privileges *repository.AdvertiserPrivileges) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdvertiserPrivileges", privileges)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdvertiserPrivileges indicates an expected call of DeleteAdvertiserPrivileges.
func (mr *MockRepositoryMockRecorder) DeleteAdvertiserPrivileges(privileges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdvertiserPrivileges", reflect.TypeOf((*MockRepository)(nil).DeleteAdvertiserPrivileges), privileges)
}

// DeleteBoostRequest mocks base method.
func (m *MockRepository) DeleteBoostRequest(br *repository.BoostRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoostRequest", br)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoostRequest indicates an expected call of DeleteBoostRequest.
func (mr *MockRepositoryMockRecorder) DeleteBoostRequest(br interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoostRequest", reflect.TypeOf((*MockRepository)(nil).DeleteBoostRequest), br)
}

// DeleteBoostRequestChannel mocks base method.
func (m *MockRepository) DeleteBoostRequestChannel(brc *repository.BoostRequestChannel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoostRequestChannel", brc)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoostRequestChannel indicates an expected call of DeleteBoostRequestChannel.
func (mr *MockRepositoryMockRecorder) DeleteBoostRequestChannel(brc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoostRequestChannel", reflect.TypeOf((*MockRepository)(nil).DeleteBoostRequestChannel), brc)
}

// DeleteBoostRequestChannelsInGuild mocks base method.
func (m *MockRepository) DeleteBoostRequestChannelsInGuild(guildID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoostRequestChannelsInGuild", guildID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoostRequestChannelsInGuild indicates an expected call of DeleteBoostRequestChannelsInGuild.
func (mr *MockRepositoryMockRecorder) DeleteBoostRequestChannelsInGuild(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoostRequestChannelsInGuild", reflect.TypeOf((*MockRepository)(nil).DeleteBoostRequestChannelsInGuild), guildID)
}

// DeleteDelayedMessage mocks base method.
func (m *MockRepository) DeleteDelayedMessage(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDelayedMessage", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDelayedMessage indicates an expected call of DeleteDelayedMessage.
func (mr *MockRepositoryMockRecorder) DeleteDelayedMessage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDelayedMessage", reflect.TypeOf((*MockRepository)(nil).DeleteDelayedMessage), id)
}

// DeleteLogChannel mocks base method.
func (m *MockRepository) DeleteLogChannel(guildID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogChannel", guildID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogChannel indicates an expected call of DeleteLogChannel.
func (mr *MockRepositoryMockRecorder) DeleteLogChannel(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogChannel", reflect.TypeOf((*MockRepository)(nil).DeleteLogChannel), guildID)
}

// DeleteRollChannel mocks base method.
func (m *MockRepository) DeleteRollChannel(guildID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRollChannel", guildID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRollChannel indicates an expected call of DeleteRollChannel.
func (mr *MockRepositoryMockRecorder) DeleteRollChannel(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRollChannel", reflect.TypeOf((*MockRepository)(nil).DeleteRollChannel), guildID)
}

// DeleteWebhook mocks base method.
func (m *MockRepository) DeleteWebhook(Webhook repository.Webhook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebhook", Webhook)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWebhook indicates an expected call of DeleteWebhook.
func (mr *MockRepositoryMockRecorder) DeleteWebhook(Webhook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhook", reflect.TypeOf((*MockRepository)(nil).DeleteWebhook), Webhook)
}

// EnableAutoSignup mocks base method.
func (m *MockRepository) EnableAutoSignup(guildID, advertiserID string, expiresAt time.Time) (*repository.AutoSignupSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableAutoSignup", guildID, advertiserID, expiresAt)
	ret0, _ := ret[0].(*repository.AutoSignupSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableAutoSignup indicates an expected call of EnableAutoSignup.
func (mr *MockRepositoryMockRecorder) EnableAutoSignup(guildID, advertiserID, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAutoSignup", reflect.TypeOf((*MockRepository)(nil).EnableAutoSignup), guildID, advertiserID, expiresAt)
}

// FlagDelayedMessageAsSent mocks base method.
func (m *MockRepository) FlagDelayedMessageAsSent(message *repository.DelayedMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlagDelayedMessageAsSent", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlagDelayedMessageAsSent indicates an expected call of FlagDelayedMessageAsSent.
func (mr *MockRepositoryMockRecorder) FlagDelayedMessageAsSent(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlagDelayedMessageAsSent", reflect.TypeOf((*MockRepository)(nil).FlagDelayedMessageAsSent), message)
}

// GetAPIKey mocks base method.
func (m *MockRepository) GetAPIKey(key string) (*repository.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKey", key)
	ret0, _ := ret[0].(*repository.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockRepositoryMockRecorder) GetAPIKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockRepository)(nil).GetAPIKey), key)
}

// GetAdvertiserPrivilegesForGuild mocks base method.
func (m *MockRepository) GetAdvertiserPrivilegesForGuild(guildID string) ([]*repository.AdvertiserPrivileges, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertiserPrivilegesForGuild", guildID)
	ret0, _ := ret[0].([]*repository.AdvertiserPrivileges)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertiserPrivilegesForGuild indicates an expected call of GetAdvertiserPrivilegesForGuild.
func (mr *MockRepositoryMockRecorder) GetAdvertiserPrivilegesForGuild(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertiserPrivilegesForGuild", reflect.TypeOf((*MockRepository)(nil).GetAdvertiserPrivilegesForGuild), guildID)
}

// GetAdvertiserPrivilegesForRole mocks base method.
func (m *MockRepository) GetAdvertiserPrivilegesForRole(guildID, roleID string) (*repository.AdvertiserPrivileges, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertiserPrivilegesForRole", guildID, roleID)
	ret0, _ := ret[0].(*repository.AdvertiserPrivileges)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertiserPrivilegesForRole indicates an expected call of GetAdvertiserPrivilegesForRole.
func (mr *MockRepositoryMockRecorder) GetAdvertiserPrivilegesForRole(guildID, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertiserPrivilegesForRole", reflect.TypeOf((*MockRepository)(nil).GetAdvertiserPrivilegesForRole), guildID, roleID)
}

// GetAutoSignupDelayedMessageIDs mocks base method.
func (m *MockRepository) GetAutoSignupDelayedMessageIDs(guildID, advertiserID string) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoSignupDelayedMessageIDs", guildID, advertiserID)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutoSignupDelayedMessageIDs indicates an expected call of GetAutoSignupDelayedMessageIDs.
func (mr *MockRepositoryMockRecorder) GetAutoSignupDelayedMessageIDs(guildID, advertiserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoSignupDelayedMessageIDs", reflect.TypeOf((*MockRepository)(nil).GetAutoSignupDelayedMessageIDs), guildID, advertiserID)
}

// GetBoostRequestByBackendMessageID mocks base method.
func (m *MockRepository) GetBoostRequestByBackendMessageID(backendChannelID, backendMessageID string) (*repository.BoostRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoostRequestByBackendMessageID", backendChannelID, backendMessageID)
	ret0, _ := ret[0].(*repository.BoostRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoostRequestByBackendMessageID indicates an expected call of GetBoostRequestByBackendMessageID.
func (mr *MockRepositoryMockRecorder) GetBoostRequestByBackendMessageID(backendChannelID, backendMessageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoostRequestByBackendMessageID", reflect.TypeOf((*MockRepository)(nil).GetBoostRequestByBackendMessageID), backendChannelID, backendMessageID)
}

// GetBoostRequestById mocks base method.
func (m *MockRepository) GetBoostRequestById(guildID string, boostRequestID uuid.UUID) (*repository.BoostRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoostRequestById", guildID, boostRequestID)
	ret0, _ := ret[0].(*repository.BoostRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoostRequestById indicates an expected call of GetBoostRequestById.
func (mr *MockRepositoryMockRecorder) GetBoostRequestById(guildID, boostRequestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoostRequestById", reflect.TypeOf((*MockRepository)(nil).GetBoostRequestById), guildID, boostRequestID)
}

// GetBoostRequestChannelByFrontendChannelID mocks base method.
func (m *MockRepository) GetBoostRequestChannelByFrontendChannelID(guildID, frontendChannelID string) (*repository.BoostRequestChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoostRequestChannelByFrontendChannelID", guildID, frontendChannelID)
	ret0, _ := ret[0].(*repository.BoostRequestChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoostRequestChannelByFrontendChannelID indicates an expected call of GetBoostRequestChannelByFrontendChannelID.
func (mr *MockRepositoryMockRecorder) GetBoostRequestChannelByFrontendChannelID(guildID, frontendChannelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoostRequestChannelByFrontendChannelID", reflect.TypeOf((*MockRepository)(nil).GetBoostRequestChannelByFrontendChannelID), guildID, frontendChannelID)
}

// GetBoostRequestChannels mocks base method.
func (m *MockRepository) GetBoostRequestChannels(guildID string) ([]*repository.BoostRequestChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoostRequestChannels", guildID)
	ret0, _ := ret[0].([]*repository.BoostRequestChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoostRequestChannels indicates an expected call of GetBoostRequestChannels.
func (mr *MockRepositoryMockRecorder) GetBoostRequestChannels(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoostRequestChannels", reflect.TypeOf((*MockRepository)(nil).GetBoostRequestChannels), guildID)
}

// GetBoostRequestDelayedMessageIDs mocks base method.
func (m *MockRepository) GetBoostRequestDelayedMessageIDs(br *repository.BoostRequest) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoostRequestDelayedMessageIDs", br)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoostRequestDelayedMessageIDs indicates an expected call of GetBoostRequestDelayedMessageIDs.
func (mr *MockRepositoryMockRecorder) GetBoostRequestDelayedMessageIDs(br interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoostRequestDelayedMessageIDs", reflect.TypeOf((*MockRepository)(nil).GetBoostRequestDelayedMessageIDs), br)
}

// GetDelayedMessages mocks base method.
func (m *MockRepository) GetDelayedMessages() ([]*repository.DelayedMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelayedMessages")
	ret0, _ := ret[0].([]*repository.DelayedMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelayedMessages indicates an expected call of GetDelayedMessages.
func (mr *MockRepositoryMockRecorder) GetDelayedMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelayedMessages", reflect.TypeOf((*MockRepository)(nil).GetDelayedMessages))
}

// GetEnabledAutoSignups mocks base method.
func (m *MockRepository) GetEnabledAutoSignups() ([]*repository.AutoSignupSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledAutoSignups")
	ret0, _ := ret[0].([]*repository.AutoSignupSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledAutoSignups indicates an expected call of GetEnabledAutoSignups.
func (mr *MockRepositoryMockRecorder) GetEnabledAutoSignups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledAutoSignups", reflect.TypeOf((*MockRepository)(nil).GetEnabledAutoSignups))
}

// GetEnabledAutoSignupsInGuild mocks base method.
func (m *MockRepository) GetEnabledAutoSignupsInGuild(guildID string) ([]*repository.AutoSignupSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledAutoSignupsInGuild", guildID)
	ret0, _ := ret[0].([]*repository.AutoSignupSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledAutoSignupsInGuild indicates an expected call of GetEnabledAutoSignupsInGuild.
func (mr *MockRepositoryMockRecorder) GetEnabledAutoSignupsInGuild(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledAutoSignupsInGuild", reflect.TypeOf((*MockRepository)(nil).GetEnabledAutoSignupsInGuild), guildID)
}

// GetGlobalStealCreditsForUser mocks base method.
func (m *MockRepository) GetGlobalStealCreditsForUser(userID string) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalStealCreditsForUser", userID)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalStealCreditsForUser indicates an expected call of GetGlobalStealCreditsForUser.
func (mr *MockRepositoryMockRecorder) GetGlobalStealCreditsForUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalStealCreditsForUser", reflect.TypeOf((*MockRepository)(nil).GetGlobalStealCreditsForUser), userID)
}

// GetLogChannel mocks base method.
func (m *MockRepository) GetLogChannel(guildID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogChannel", guildID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogChannel indicates an expected call of GetLogChannel.
func (mr *MockRepositoryMockRecorder) GetLogChannel(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogChannel", reflect.TypeOf((*MockRepository)(nil).GetLogChannel), guildID)
}

// GetQueuedWebhooks mocks base method.
func (m *MockRepository) GetQueuedWebhooks() ([]*repository.QueuedWebhookRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueuedWebhooks")
	ret0, _ := ret[0].([]*repository.QueuedWebhookRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueuedWebhooks indicates an expected call of GetQueuedWebhooks.
func (mr *MockRepositoryMockRecorder) GetQueuedWebhooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueuedWebhooks", reflect.TypeOf((*MockRepository)(nil).GetQueuedWebhooks))
}

// GetRollChannel mocks base method.
func (m *MockRepository) GetRollChannel(guildID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRollChannel", guildID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRollChannel indicates an expected call of GetRollChannel.
func (mr *MockRepositoryMockRecorder) GetRollChannel(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRollChannel", reflect.TypeOf((*MockRepository)(nil).GetRollChannel), guildID)
}

// GetStealCreditsForUser mocks base method.
func (m *MockRepository) GetStealCreditsForUser(guildID, userID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStealCreditsForUser", guildID, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStealCreditsForUser indicates an expected call of GetStealCreditsForUser.
func (mr *MockRepositoryMockRecorder) GetStealCreditsForUser(guildID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStealCreditsForUser", reflect.TypeOf((*MockRepository)(nil).GetStealCreditsForUser), guildID, userID)
}

// GetUnresolvedBoostRequests mocks base method.
func (m *MockRepository) GetUnresolvedBoostRequests() ([]*repository.BoostRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnresolvedBoostRequests")
	ret0, _ := ret[0].([]*repository.BoostRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnresolvedBoostRequests indicates an expected call of GetUnresolvedBoostRequests.
func (mr *MockRepositoryMockRecorder) GetUnresolvedBoostRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnresolvedBoostRequests", reflect.TypeOf((*MockRepository)(nil).GetUnresolvedBoostRequests))
}

// GetWebhook mocks base method.
func (m *MockRepository) GetWebhook(guildId string) (repository.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhook", guildId)
	ret0, _ := ret[0].(repository.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhook indicates an expected call of GetWebhook.
func (mr *MockRepositoryMockRecorder) GetWebhook(guildId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhook", reflect.TypeOf((*MockRepository)(nil).GetWebhook), guildId)
}

// InsertAdvertiserPrivileges mocks base method.
func (m *MockRepository) InsertAdvertiserPrivileges(privileges *repository.AdvertiserPrivileges) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAdvertiserPrivileges", privileges)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAdvertiserPrivileges indicates an expected call of InsertAdvertiserPrivileges.
func (mr *MockRepositoryMockRecorder) InsertAdvertiserPrivileges(privileges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAdvertiserPrivileges", reflect.TypeOf((*MockRepository)(nil).InsertAdvertiserPrivileges), privileges)
}

// InsertAutoSignupDelayedMessages mocks base method.
func (m *MockRepository) InsertAutoSignupDelayedMessages(autoSignup *repository.AutoSignupSession, delayedMessages []*repository.DelayedMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAutoSignupDelayedMessages", autoSignup, delayedMessages)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAutoSignupDelayedMessages indicates an expected call of InsertAutoSignupDelayedMessages.
func (mr *MockRepositoryMockRecorder) InsertAutoSignupDelayedMessages(autoSignup, delayedMessages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAutoSignupDelayedMessages", reflect.TypeOf((*MockRepository)(nil).InsertAutoSignupDelayedMessages), autoSignup, delayedMessages)
}

// InsertBoostRequest mocks base method.
func (m *MockRepository) InsertBoostRequest(br *repository.BoostRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBoostRequest", br)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBoostRequest indicates an expected call of InsertBoostRequest.
func (mr *MockRepositoryMockRecorder) InsertBoostRequest(br interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBoostRequest", reflect.TypeOf((*MockRepository)(nil).InsertBoostRequest), br)
}

// InsertBoostRequestChannel mocks base method.
func (m *MockRepository) InsertBoostRequestChannel(brc *repository.BoostRequestChannel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBoostRequestChannel", brc)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBoostRequestChannel indicates an expected call of InsertBoostRequestChannel.
func (mr *MockRepositoryMockRecorder) InsertBoostRequestChannel(brc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBoostRequestChannel", reflect.TypeOf((*MockRepository)(nil).InsertBoostRequestChannel), brc)
}

// InsertBoostRequestDelayedMessage mocks base method.
func (m *MockRepository) InsertBoostRequestDelayedMessage(br *repository.BoostRequest, delayedMessage *repository.DelayedMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBoostRequestDelayedMessage", br, delayedMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBoostRequestDelayedMessage indicates an expected call of InsertBoostRequestDelayedMessage.
func (mr *MockRepositoryMockRecorder) InsertBoostRequestDelayedMessage(br, delayedMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBoostRequestDelayedMessage", reflect.TypeOf((*MockRepository)(nil).InsertBoostRequestDelayedMessage), br, delayedMessage)
}

// InsertDelayedMessage mocks base method.
func (m *MockRepository) InsertDelayedMessage(delayedMessage *repository.DelayedMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDelayedMessage", delayedMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDelayedMessage indicates an expected call of InsertDelayedMessage.
func (mr *MockRepositoryMockRecorder) InsertDelayedMessage(delayedMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDelayedMessage", reflect.TypeOf((*MockRepository)(nil).InsertDelayedMessage), delayedMessage)
}

// InsertLogChannel mocks base method.
func (m *MockRepository) InsertLogChannel(guildID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLogChannel", guildID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLogChannel indicates an expected call of InsertLogChannel.
func (mr *MockRepositoryMockRecorder) InsertLogChannel(guildID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLogChannel", reflect.TypeOf((*MockRepository)(nil).InsertLogChannel), guildID, channelID)
}

// InsertQueuedWebhook mocks base method.
func (m *MockRepository) InsertQueuedWebhook(webhook repository.Webhook, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertQueuedWebhook", webhook, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertQueuedWebhook indicates an expected call of InsertQueuedWebhook.
func (mr *MockRepositoryMockRecorder) InsertQueuedWebhook(webhook, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertQueuedWebhook", reflect.TypeOf((*MockRepository)(nil).InsertQueuedWebhook), webhook, body)
}

// InsertRollChannel mocks base method.
func (m *MockRepository) InsertRollChannel(guildID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRollChannel", guildID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRollChannel indicates an expected call of InsertRollChannel.
func (mr *MockRepositoryMockRecorder) InsertRollChannel(guildID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRollChannel", reflect.TypeOf((*MockRepository)(nil).InsertRollChannel), guildID, channelID)
}

// InsertWebhook mocks base method.
func (m *MockRepository) InsertWebhook(webhook repository.Webhook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWebhook", webhook)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertWebhook indicates an expected call of InsertWebhook.
func (mr *MockRepositoryMockRecorder) InsertWebhook(webhook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWebhook", reflect.TypeOf((*MockRepository)(nil).InsertWebhook), webhook)
}

// InsertWebhookAttempt mocks base method.
func (m *MockRepository) InsertWebhookAttempt(attempt repository.WebhookAttempt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWebhookAttempt", attempt)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertWebhookAttempt indicates an expected call of InsertWebhookAttempt.
func (mr *MockRepositoryMockRecorder) InsertWebhookAttempt(attempt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWebhookAttempt", reflect.TypeOf((*MockRepository)(nil).InsertWebhookAttempt), attempt)
}

// IsAutoSignupEnabled mocks base method.
func (m *MockRepository) IsAutoSignupEnabled(guildID, advertiserID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAutoSignupEnabled", guildID, advertiserID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAutoSignupEnabled indicates an expected call of IsAutoSignupEnabled.
func (mr *MockRepositoryMockRecorder) IsAutoSignupEnabled(guildID, advertiserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAutoSignupEnabled", reflect.TypeOf((*MockRepository)(nil).IsAutoSignupEnabled), guildID, advertiserID)
}

// NewAPIKey mocks base method.
func (m *MockRepository) NewAPIKey(guildID string) (*repository.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAPIKey", guildID)
	ret0, _ := ret[0].(*repository.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAPIKey indicates an expected call of NewAPIKey.
func (mr *MockRepositoryMockRecorder) NewAPIKey(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAPIKey", reflect.TypeOf((*MockRepository)(nil).NewAPIKey), guildID)
}

// ResolveBoostRequest mocks base method.
func (m *MockRepository) ResolveBoostRequest(br *repository.BoostRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveBoostRequest", br)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveBoostRequest indicates an expected call of ResolveBoostRequest.
func (mr *MockRepositoryMockRecorder) ResolveBoostRequest(br interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveBoostRequest", reflect.TypeOf((*MockRepository)(nil).ResolveBoostRequest), br)
}

// UpdateStealCreditsForUser mocks base method.
func (m *MockRepository) UpdateStealCreditsForUser(guildID, userID string, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStealCreditsForUser", guildID, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStealCreditsForUser indicates an expected call of UpdateStealCreditsForUser.
func (mr *MockRepositoryMockRecorder) UpdateStealCreditsForUser(guildID, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStealCreditsForUser", reflect.TypeOf((*MockRepository)(nil).UpdateStealCreditsForUser), guildID, userID, amount)
}

// MockApiKeyRepository is a mock of ApiKeyRepository interface.
type MockApiKeyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockApiKeyRepositoryMockRecorder
}

// MockApiKeyRepositoryMockRecorder is the mock recorder for MockApiKeyRepository.
type MockApiKeyRepositoryMockRecorder struct {
	mock *MockApiKeyRepository
}

// NewMockApiKeyRepository creates a new mock instance.
func NewMockApiKeyRepository(ctrl *gomock.Controller) *MockApiKeyRepository {
	mock := &MockApiKeyRepository{ctrl: ctrl}
	mock.recorder = &MockApiKeyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiKeyRepository) EXPECT() *MockApiKeyRepositoryMockRecorder {
	return m.recorder
}

// GetAPIKey mocks base method.
func (m *MockApiKeyRepository) GetAPIKey(key string) (*repository.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKey", key)
	ret0, _ := ret[0].(*repository.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockApiKeyRepositoryMockRecorder) GetAPIKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockApiKeyRepository)(nil).GetAPIKey), key)
}

// NewAPIKey mocks base method.
func (m *MockApiKeyRepository) NewAPIKey(guildID string) (*repository.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAPIKey", guildID)
	ret0, _ := ret[0].(*repository.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAPIKey indicates an expected call of NewAPIKey.
func (mr *MockApiKeyRepositoryMockRecorder) NewAPIKey(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAPIKey", reflect.TypeOf((*MockApiKeyRepository)(nil).NewAPIKey), guildID)
}

// MockBoostRequestRepository is a mock of BoostRequestRepository interface.
type MockBoostRequestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBoostRequestRepositoryMockRecorder
}

// MockBoostRequestRepositoryMockRecorder is the mock recorder for MockBoostRequestRepository.
type MockBoostRequestRepositoryMockRecorder struct {
	mock *MockBoostRequestRepository
}

// NewMockBoostRequestRepository creates a new mock instance.
func NewMockBoostRequestRepository(ctrl *gomock.Controller) *MockBoostRequestRepository {
	mock := &MockBoostRequestRepository{ctrl: ctrl}
	mock.recorder = &MockBoostRequestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBoostRequestRepository) EXPECT() *MockBoostRequestRepositoryMockRecorder {
	return m.recorder
}

// DeleteBoostRequest mocks base method.
func (m *MockBoostRequestRepository) DeleteBoostRequest(br *repository.BoostRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoostRequest", br)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoostRequest indicates an expected call of DeleteBoostRequest.
func (mr *MockBoostRequestRepositoryMockRecorder) DeleteBoostRequest(br interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoostRequest", reflect.TypeOf((*MockBoostRequestRepository)(nil).DeleteBoostRequest), br)
}

// GetBoostRequestByBackendMessageID mocks base method.
func (m *MockBoostRequestRepository) GetBoostRequestByBackendMessageID(backendChannelID, backendMessageID string) (*repository.BoostRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoostRequestByBackendMessageID", backendChannelID, backendMessageID)
	ret0, _ := ret[0].(*repository.BoostRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoostRequestByBackendMessageID indicates an expected call of GetBoostRequestByBackendMessageID.
func (mr *MockBoostRequestRepositoryMockRecorder) GetBoostRequestByBackendMessageID(backendChannelID, backendMessageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoostRequestByBackendMessageID", reflect.TypeOf((*MockBoostRequestRepository)(nil).GetBoostRequestByBackendMessageID), backendChannelID, backendMessageID)
}

// GetBoostRequestById mocks base method.
func (m *MockBoostRequestRepository) GetBoostRequestById(guildID string, boostRequestID uuid.UUID) (*repository.BoostRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoostRequestById", guildID, boostRequestID)
	ret0, _ := ret[0].(*repository.BoostRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoostRequestById indicates an expected call of GetBoostRequestById.
func (mr *MockBoostRequestRepositoryMockRecorder) GetBoostRequestById(guildID, boostRequestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoostRequestById", reflect.TypeOf((*MockBoostRequestRepository)(nil).GetBoostRequestById), guildID, boostRequestID)
}

// GetBoostRequestDelayedMessageIDs mocks base method.
func (m *MockBoostRequestRepository) GetBoostRequestDelayedMessageIDs(br *repository.BoostRequest) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoostRequestDelayedMessageIDs", br)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoostRequestDelayedMessageIDs indicates an expected call of GetBoostRequestDelayedMessageIDs.
func (mr *MockBoostRequestRepositoryMockRecorder) GetBoostRequestDelayedMessageIDs(br interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoostRequestDelayedMessageIDs", reflect.TypeOf((*MockBoostRequestRepository)(nil).GetBoostRequestDelayedMessageIDs), br)
}

// GetUnresolvedBoostRequests mocks base method.
func (m *MockBoostRequestRepository) GetUnresolvedBoostRequests() ([]*repository.BoostRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnresolvedBoostRequests")
	ret0, _ := ret[0].([]*repository.BoostRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnresolvedBoostRequests indicates an expected call of GetUnresolvedBoostRequests.
func (mr *MockBoostRequestRepositoryMockRecorder) GetUnresolvedBoostRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnresolvedBoostRequests", reflect.TypeOf((*MockBoostRequestRepository)(nil).GetUnresolvedBoostRequests))
}

// InsertBoostRequest mocks base method.
func (m *MockBoostRequestRepository) InsertBoostRequest(br *repository.BoostRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBoostRequest", br)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBoostRequest indicates an expected call of InsertBoostRequest.
func (mr *MockBoostRequestRepositoryMockRecorder) InsertBoostRequest(br interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBoostRequest", reflect.TypeOf((*MockBoostRequestRepository)(nil).InsertBoostRequest), br)
}

// InsertBoostRequestDelayedMessage mocks base method.
func (m *MockBoostRequestRepository) InsertBoostRequestDelayedMessage(br *repository.BoostRequest, delayedMessage *repository.DelayedMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBoostRequestDelayedMessage", br, delayedMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBoostRequestDelayedMessage indicates an expected call of InsertBoostRequestDelayedMessage.
func (mr *MockBoostRequestRepositoryMockRecorder) InsertBoostRequestDelayedMessage(br, delayedMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBoostRequestDelayedMessage", reflect.TypeOf((*MockBoostRequestRepository)(nil).InsertBoostRequestDelayedMessage), br, delayedMessage)
}

// ResolveBoostRequest mocks base method.
func (m *MockBoostRequestRepository) ResolveBoostRequest(br *repository.BoostRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveBoostRequest", br)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveBoostRequest indicates an expected call of ResolveBoostRequest.
func (mr *MockBoostRequestRepositoryMockRecorder) ResolveBoostRequest(br interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveBoostRequest", reflect.TypeOf((*MockBoostRequestRepository)(nil).ResolveBoostRequest), br)
}

// MockBoostRequestChannelRepository is a mock of BoostRequestChannelRepository interface.
type MockBoostRequestChannelRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBoostRequestChannelRepositoryMockRecorder
}

// MockBoostRequestChannelRepositoryMockRecorder is the mock recorder for MockBoostRequestChannelRepository.
type MockBoostRequestChannelRepositoryMockRecorder struct {
	mock *MockBoostRequestChannelRepository
}

// NewMockBoostRequestChannelRepository creates a new mock instance.
func NewMockBoostRequestChannelRepository(ctrl *gomock.Controller) *MockBoostRequestChannelRepository {
	mock := &MockBoostRequestChannelRepository{ctrl: ctrl}
	mock.recorder = &MockBoostRequestChannelRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBoostRequestChannelRepository) EXPECT() *MockBoostRequestChannelRepositoryMockRecorder {
	return m.recorder
}

// DeleteBoostRequestChannel mocks base method.
func (m *MockBoostRequestChannelRepository) DeleteBoostRequestChannel(brc *repository.BoostRequestChannel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoostRequestChannel", brc)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoostRequestChannel indicates an expected call of DeleteBoostRequestChannel.
func (mr *MockBoostRequestChannelRepositoryMockRecorder) DeleteBoostRequestChannel(brc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoostRequestChannel", reflect.TypeOf((*MockBoostRequestChannelRepository)(nil).DeleteBoostRequestChannel), brc)
}

// DeleteBoostRequestChannelsInGuild mocks base method.
func (m *MockBoostRequestChannelRepository) DeleteBoostRequestChannelsInGuild(guildID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBoostRequestChannelsInGuild", guildID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBoostRequestChannelsInGuild indicates an expected call of DeleteBoostRequestChannelsInGuild.
func (mr *MockBoostRequestChannelRepositoryMockRecorder) DeleteBoostRequestChannelsInGuild(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBoostRequestChannelsInGuild", reflect.TypeOf((*MockBoostRequestChannelRepository)(nil).DeleteBoostRequestChannelsInGuild), guildID)
}

// GetBoostRequestChannelByFrontendChannelID mocks base method.
func (m *MockBoostRequestChannelRepository) GetBoostRequestChannelByFrontendChannelID(guildID, frontendChannelID string) (*repository.BoostRequestChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoostRequestChannelByFrontendChannelID", guildID, frontendChannelID)
	ret0, _ := ret[0].(*repository.BoostRequestChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoostRequestChannelByFrontendChannelID indicates an expected call of GetBoostRequestChannelByFrontendChannelID.
func (mr *MockBoostRequestChannelRepositoryMockRecorder) GetBoostRequestChannelByFrontendChannelID(guildID, frontendChannelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoostRequestChannelByFrontendChannelID", reflect.TypeOf((*MockBoostRequestChannelRepository)(nil).GetBoostRequestChannelByFrontendChannelID), guildID, frontendChannelID)
}

// GetBoostRequestChannels mocks base method.
func (m *MockBoostRequestChannelRepository) GetBoostRequestChannels(guildID string) ([]*repository.BoostRequestChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoostRequestChannels", guildID)
	ret0, _ := ret[0].([]*repository.BoostRequestChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoostRequestChannels indicates an expected call of GetBoostRequestChannels.
func (mr *MockBoostRequestChannelRepositoryMockRecorder) GetBoostRequestChannels(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoostRequestChannels", reflect.TypeOf((*MockBoostRequestChannelRepository)(nil).GetBoostRequestChannels), guildID)
}

// InsertBoostRequestChannel mocks base method.
func (m *MockBoostRequestChannelRepository) InsertBoostRequestChannel(brc *repository.BoostRequestChannel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBoostRequestChannel", brc)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBoostRequestChannel indicates an expected call of InsertBoostRequestChannel.
func (mr *MockBoostRequestChannelRepositoryMockRecorder) InsertBoostRequestChannel(brc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBoostRequestChannel", reflect.TypeOf((*MockBoostRequestChannelRepository)(nil).InsertBoostRequestChannel), brc)
}

// MockAdvertiserPrivilegesRepository is a mock of AdvertiserPrivilegesRepository interface.
type MockAdvertiserPrivilegesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdvertiserPrivilegesRepositoryMockRecorder
}

// MockAdvertiserPrivilegesRepositoryMockRecorder is the mock recorder for MockAdvertiserPrivilegesRepository.
type MockAdvertiserPrivilegesRepositoryMockRecorder struct {
	mock *MockAdvertiserPrivilegesRepository
}

// NewMockAdvertiserPrivilegesRepository creates a new mock instance.
func NewMockAdvertiserPrivilegesRepository(ctrl *gomock.Controller) *MockAdvertiserPrivilegesRepository {
	mock := &MockAdvertiserPrivilegesRepository{ctrl: ctrl}
	mock.recorder = &MockAdvertiserPrivilegesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdvertiserPrivilegesRepository) EXPECT() *MockAdvertiserPrivilegesRepositoryMockRecorder {
	return m.recorder
}

// DeleteAdvertiserPrivileges mocks base method.
func (m *MockAdvertiserPrivilegesRepository) DeleteAdvertiserPrivileges(privileges *repository.AdvertiserPrivileges) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdvertiserPrivileges", privileges)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdvertiserPrivileges indicates an expected call of DeleteAdvertiserPrivileges.
func (mr *MockAdvertiserPrivilegesRepositoryMockRecorder) DeleteAdvertiserPrivileges(privileges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdvertiserPrivileges", reflect.TypeOf((*MockAdvertiserPrivilegesRepository)(nil).DeleteAdvertiserPrivileges), privileges)
}

// GetAdvertiserPrivilegesForGuild mocks base method.
func (m *MockAdvertiserPrivilegesRepository) GetAdvertiserPrivilegesForGuild(guildID string) ([]*repository.AdvertiserPrivileges, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertiserPrivilegesForGuild", guildID)
	ret0, _ := ret[0].([]*repository.AdvertiserPrivileges)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertiserPrivilegesForGuild indicates an expected call of GetAdvertiserPrivilegesForGuild.
func (mr *MockAdvertiserPrivilegesRepositoryMockRecorder) GetAdvertiserPrivilegesForGuild(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertiserPrivilegesForGuild", reflect.TypeOf((*MockAdvertiserPrivilegesRepository)(nil).GetAdvertiserPrivilegesForGuild), guildID)
}

// GetAdvertiserPrivilegesForRole mocks base method.
func (m *MockAdvertiserPrivilegesRepository) GetAdvertiserPrivilegesForRole(guildID, roleID string) (*repository.AdvertiserPrivileges, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdvertiserPrivilegesForRole", guildID, roleID)
	ret0, _ := ret[0].(*repository.AdvertiserPrivileges)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdvertiserPrivilegesForRole indicates an expected call of GetAdvertiserPrivilegesForRole.
func (mr *MockAdvertiserPrivilegesRepositoryMockRecorder) GetAdvertiserPrivilegesForRole(guildID, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdvertiserPrivilegesForRole", reflect.TypeOf((*MockAdvertiserPrivilegesRepository)(nil).GetAdvertiserPrivilegesForRole), guildID, roleID)
}

// InsertAdvertiserPrivileges mocks base method.
func (m *MockAdvertiserPrivilegesRepository) InsertAdvertiserPrivileges(privileges *repository.AdvertiserPrivileges) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAdvertiserPrivileges", privileges)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAdvertiserPrivileges indicates an expected call of InsertAdvertiserPrivileges.
func (mr *MockAdvertiserPrivilegesRepositoryMockRecorder) InsertAdvertiserPrivileges(privileges interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAdvertiserPrivileges", reflect.TypeOf((*MockAdvertiserPrivilegesRepository)(nil).InsertAdvertiserPrivileges), privileges)
}

// MockLogChannelRepository is a mock of LogChannelRepository interface.
type MockLogChannelRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLogChannelRepositoryMockRecorder
}

// MockLogChannelRepositoryMockRecorder is the mock recorder for MockLogChannelRepository.
type MockLogChannelRepositoryMockRecorder struct {
	mock *MockLogChannelRepository
}

// NewMockLogChannelRepository creates a new mock instance.
func NewMockLogChannelRepository(ctrl *gomock.Controller) *MockLogChannelRepository {
	mock := &MockLogChannelRepository{ctrl: ctrl}
	mock.recorder = &MockLogChannelRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogChannelRepository) EXPECT() *MockLogChannelRepositoryMockRecorder {
	return m.recorder
}

// DeleteLogChannel mocks base method.
func (m *MockLogChannelRepository) DeleteLogChannel(guildID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogChannel", guildID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogChannel indicates an expected call of DeleteLogChannel.
func (mr *MockLogChannelRepositoryMockRecorder) DeleteLogChannel(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogChannel", reflect.TypeOf((*MockLogChannelRepository)(nil).DeleteLogChannel), guildID)
}

// GetLogChannel mocks base method.
func (m *MockLogChannelRepository) GetLogChannel(guildID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogChannel", guildID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogChannel indicates an expected call of GetLogChannel.
func (mr *MockLogChannelRepositoryMockRecorder) GetLogChannel(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogChannel", reflect.TypeOf((*MockLogChannelRepository)(nil).GetLogChannel), guildID)
}

// InsertLogChannel mocks base method.
func (m *MockLogChannelRepository) InsertLogChannel(guildID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLogChannel", guildID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLogChannel indicates an expected call of InsertLogChannel.
func (mr *MockLogChannelRepositoryMockRecorder) InsertLogChannel(guildID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLogChannel", reflect.TypeOf((*MockLogChannelRepository)(nil).InsertLogChannel), guildID, channelID)
}

// MockStealCreditRepository is a mock of StealCreditRepository interface.
type MockStealCreditRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStealCreditRepositoryMockRecorder
}

// MockStealCreditRepositoryMockRecorder is the mock recorder for MockStealCreditRepository.
type MockStealCreditRepositoryMockRecorder struct {
	mock *MockStealCreditRepository
}

// NewMockStealCreditRepository creates a new mock instance.
func NewMockStealCreditRepository(ctrl *gomock.Controller) *MockStealCreditRepository {
	mock := &MockStealCreditRepository{ctrl: ctrl}
	mock.recorder = &MockStealCreditRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStealCreditRepository) EXPECT() *MockStealCreditRepositoryMockRecorder {
	return m.recorder
}

// AdjustStealCreditsForUser mocks base method.
func (m *MockStealCreditRepository) AdjustStealCreditsForUser(guildID, userID string, operation repository.Operation, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdjustStealCreditsForUser", guildID, userID, operation, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdjustStealCreditsForUser indicates an expected call of AdjustStealCreditsForUser.
func (mr *MockStealCreditRepositoryMockRecorder) AdjustStealCreditsForUser(guildID, userID, operation, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdjustStealCreditsForUser", reflect.TypeOf((*MockStealCreditRepository)(nil).AdjustStealCreditsForUser), guildID, userID, operation, amount)
}

// GetGlobalStealCreditsForUser mocks base method.
func (m *MockStealCreditRepository) GetGlobalStealCreditsForUser(userID string) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalStealCreditsForUser", userID)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalStealCreditsForUser indicates an expected call of GetGlobalStealCreditsForUser.
func (mr *MockStealCreditRepositoryMockRecorder) GetGlobalStealCreditsForUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalStealCreditsForUser", reflect.TypeOf((*MockStealCreditRepository)(nil).GetGlobalStealCreditsForUser), userID)
}

// GetStealCreditsForUser mocks base method.
func (m *MockStealCreditRepository) GetStealCreditsForUser(guildID, userID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStealCreditsForUser", guildID, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStealCreditsForUser indicates an expected call of GetStealCreditsForUser.
func (mr *MockStealCreditRepositoryMockRecorder) GetStealCreditsForUser(guildID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStealCreditsForUser", reflect.TypeOf((*MockStealCreditRepository)(nil).GetStealCreditsForUser), guildID, userID)
}

// UpdateStealCreditsForUser mocks base method.
func (m *MockStealCreditRepository) UpdateStealCreditsForUser(guildID, userID string, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStealCreditsForUser", guildID, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStealCreditsForUser indicates an expected call of UpdateStealCreditsForUser.
func (mr *MockStealCreditRepositoryMockRecorder) UpdateStealCreditsForUser(guildID, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStealCreditsForUser", reflect.TypeOf((*MockStealCreditRepository)(nil).UpdateStealCreditsForUser), guildID, userID, amount)
}

// MockRollChannelRepository is a mock of RollChannelRepository interface.
type MockRollChannelRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRollChannelRepositoryMockRecorder
}

// MockRollChannelRepositoryMockRecorder is the mock recorder for MockRollChannelRepository.
type MockRollChannelRepositoryMockRecorder struct {
	mock *MockRollChannelRepository
}

// NewMockRollChannelRepository creates a new mock instance.
func NewMockRollChannelRepository(ctrl *gomock.Controller) *MockRollChannelRepository {
	mock := &MockRollChannelRepository{ctrl: ctrl}
	mock.recorder = &MockRollChannelRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRollChannelRepository) EXPECT() *MockRollChannelRepositoryMockRecorder {
	return m.recorder
}

// DeleteRollChannel mocks base method.
func (m *MockRollChannelRepository) DeleteRollChannel(guildID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRollChannel", guildID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRollChannel indicates an expected call of DeleteRollChannel.
func (mr *MockRollChannelRepositoryMockRecorder) DeleteRollChannel(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRollChannel", reflect.TypeOf((*MockRollChannelRepository)(nil).DeleteRollChannel), guildID)
}

// GetRollChannel mocks base method.
func (m *MockRollChannelRepository) GetRollChannel(guildID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRollChannel", guildID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRollChannel indicates an expected call of GetRollChannel.
func (mr *MockRollChannelRepositoryMockRecorder) GetRollChannel(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRollChannel", reflect.TypeOf((*MockRollChannelRepository)(nil).GetRollChannel), guildID)
}

// InsertRollChannel mocks base method.
func (m *MockRollChannelRepository) InsertRollChannel(guildID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRollChannel", guildID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRollChannel indicates an expected call of InsertRollChannel.
func (mr *MockRollChannelRepositoryMockRecorder) InsertRollChannel(guildID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRollChannel", reflect.TypeOf((*MockRollChannelRepository)(nil).InsertRollChannel), guildID, channelID)
}

// MockWebhookRepository is a mock of WebhookRepository interface.
type MockWebhookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWebhookRepositoryMockRecorder
}

// MockWebhookRepositoryMockRecorder is the mock recorder for MockWebhookRepository.
type MockWebhookRepositoryMockRecorder struct {
	mock *MockWebhookRepository
}

// NewMockWebhookRepository creates a new mock instance.
func NewMockWebhookRepository(ctrl *gomock.Controller) *MockWebhookRepository {
	mock := &MockWebhookRepository{ctrl: ctrl}
	mock.recorder = &MockWebhookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebhookRepository) EXPECT() *MockWebhookRepositoryMockRecorder {
	return m.recorder
}

// DeleteWebhook mocks base method.
func (m *MockWebhookRepository) DeleteWebhook(Webhook repository.Webhook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebhook", Webhook)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWebhook indicates an expected call of DeleteWebhook.
func (mr *MockWebhookRepositoryMockRecorder) DeleteWebhook(Webhook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebhook", reflect.TypeOf((*MockWebhookRepository)(nil).DeleteWebhook), Webhook)
}

// GetQueuedWebhooks mocks base method.
func (m *MockWebhookRepository) GetQueuedWebhooks() ([]*repository.QueuedWebhookRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueuedWebhooks")
	ret0, _ := ret[0].([]*repository.QueuedWebhookRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueuedWebhooks indicates an expected call of GetQueuedWebhooks.
func (mr *MockWebhookRepositoryMockRecorder) GetQueuedWebhooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueuedWebhooks", reflect.TypeOf((*MockWebhookRepository)(nil).GetQueuedWebhooks))
}

// GetWebhook mocks base method.
func (m *MockWebhookRepository) GetWebhook(guildId string) (repository.Webhook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhook", guildId)
	ret0, _ := ret[0].(repository.Webhook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhook indicates an expected call of GetWebhook.
func (mr *MockWebhookRepositoryMockRecorder) GetWebhook(guildId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhook", reflect.TypeOf((*MockWebhookRepository)(nil).GetWebhook), guildId)
}

// InsertQueuedWebhook mocks base method.
func (m *MockWebhookRepository) InsertQueuedWebhook(webhook repository.Webhook, body string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertQueuedWebhook", webhook, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertQueuedWebhook indicates an expected call of InsertQueuedWebhook.
func (mr *MockWebhookRepositoryMockRecorder) InsertQueuedWebhook(webhook, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertQueuedWebhook", reflect.TypeOf((*MockWebhookRepository)(nil).InsertQueuedWebhook), webhook, body)
}

// InsertWebhook mocks base method.
func (m *MockWebhookRepository) InsertWebhook(webhook repository.Webhook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWebhook", webhook)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertWebhook indicates an expected call of InsertWebhook.
func (mr *MockWebhookRepositoryMockRecorder) InsertWebhook(webhook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWebhook", reflect.TypeOf((*MockWebhookRepository)(nil).InsertWebhook), webhook)
}

// InsertWebhookAttempt mocks base method.
func (m *MockWebhookRepository) InsertWebhookAttempt(attempt repository.WebhookAttempt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWebhookAttempt", attempt)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertWebhookAttempt indicates an expected call of InsertWebhookAttempt.
func (mr *MockWebhookRepositoryMockRecorder) InsertWebhookAttempt(attempt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWebhookAttempt", reflect.TypeOf((*MockWebhookRepository)(nil).InsertWebhookAttempt), attempt)
}

// MockAutoSignupSessionRepository is a mock of AutoSignupSessionRepository interface.
type MockAutoSignupSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAutoSignupSessionRepositoryMockRecorder
}

// MockAutoSignupSessionRepositoryMockRecorder is the mock recorder for MockAutoSignupSessionRepository.
type MockAutoSignupSessionRepositoryMockRecorder struct {
	mock *MockAutoSignupSessionRepository
}

// NewMockAutoSignupSessionRepository creates a new mock instance.
func NewMockAutoSignupSessionRepository(ctrl *gomock.Controller) *MockAutoSignupSessionRepository {
	mock := &MockAutoSignupSessionRepository{ctrl: ctrl}
	mock.recorder = &MockAutoSignupSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAutoSignupSessionRepository) EXPECT() *MockAutoSignupSessionRepositoryMockRecorder {
	return m.recorder
}

// CancelAutoSignup mocks base method.
func (m *MockAutoSignupSessionRepository) CancelAutoSignup(guildID, advertiserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelAutoSignup", guildID, advertiserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelAutoSignup indicates an expected call of CancelAutoSignup.
func (mr *MockAutoSignupSessionRepositoryMockRecorder) CancelAutoSignup(guildID, advertiserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAutoSignup", reflect.TypeOf((*MockAutoSignupSessionRepository)(nil).CancelAutoSignup), guildID, advertiserID)
}

// EnableAutoSignup mocks base method.
func (m *MockAutoSignupSessionRepository) EnableAutoSignup(guildID, advertiserID string, expiresAt time.Time) (*repository.AutoSignupSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableAutoSignup", guildID, advertiserID, expiresAt)
	ret0, _ := ret[0].(*repository.AutoSignupSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableAutoSignup indicates an expected call of EnableAutoSignup.
func (mr *MockAutoSignupSessionRepositoryMockRecorder) EnableAutoSignup(guildID, advertiserID, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAutoSignup", reflect.TypeOf((*MockAutoSignupSessionRepository)(nil).EnableAutoSignup), guildID, advertiserID, expiresAt)
}

// GetAutoSignupDelayedMessageIDs mocks base method.
func (m *MockAutoSignupSessionRepository) GetAutoSignupDelayedMessageIDs(guildID, advertiserID string) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoSignupDelayedMessageIDs", guildID, advertiserID)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutoSignupDelayedMessageIDs indicates an expected call of GetAutoSignupDelayedMessageIDs.
func (mr *MockAutoSignupSessionRepositoryMockRecorder) GetAutoSignupDelayedMessageIDs(guildID, advertiserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoSignupDelayedMessageIDs", reflect.TypeOf((*MockAutoSignupSessionRepository)(nil).GetAutoSignupDelayedMessageIDs), guildID, advertiserID)
}

// GetEnabledAutoSignups mocks base method.
func (m *MockAutoSignupSessionRepository) GetEnabledAutoSignups() ([]*repository.AutoSignupSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledAutoSignups")
	ret0, _ := ret[0].([]*repository.AutoSignupSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledAutoSignups indicates an expected call of GetEnabledAutoSignups.
func (mr *MockAutoSignupSessionRepositoryMockRecorder) GetEnabledAutoSignups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledAutoSignups", reflect.TypeOf((*MockAutoSignupSessionRepository)(nil).GetEnabledAutoSignups))
}

// GetEnabledAutoSignupsInGuild mocks base method.
func (m *MockAutoSignupSessionRepository) GetEnabledAutoSignupsInGuild(guildID string) ([]*repository.AutoSignupSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabledAutoSignupsInGuild", guildID)
	ret0, _ := ret[0].([]*repository.AutoSignupSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabledAutoSignupsInGuild indicates an expected call of GetEnabledAutoSignupsInGuild.
func (mr *MockAutoSignupSessionRepositoryMockRecorder) GetEnabledAutoSignupsInGuild(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabledAutoSignupsInGuild", reflect.TypeOf((*MockAutoSignupSessionRepository)(nil).GetEnabledAutoSignupsInGuild), guildID)
}

// InsertAutoSignupDelayedMessages mocks base method.
func (m *MockAutoSignupSessionRepository) InsertAutoSignupDelayedMessages(autoSignup *repository.AutoSignupSession, delayedMessages []*repository.DelayedMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAutoSignupDelayedMessages", autoSignup, delayedMessages)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAutoSignupDelayedMessages indicates an expected call of InsertAutoSignupDelayedMessages.
func (mr *MockAutoSignupSessionRepositoryMockRecorder) InsertAutoSignupDelayedMessages(autoSignup, delayedMessages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAutoSignupDelayedMessages", reflect.TypeOf((*MockAutoSignupSessionRepository)(nil).InsertAutoSignupDelayedMessages), autoSignup, delayedMessages)
}

// IsAutoSignupEnabled mocks base method.
func (m *MockAutoSignupSessionRepository) IsAutoSignupEnabled(guildID, advertiserID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAutoSignupEnabled", guildID, advertiserID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAutoSignupEnabled indicates an expected call of IsAutoSignupEnabled.
func (mr *MockAutoSignupSessionRepositoryMockRecorder) IsAutoSignupEnabled(guildID, advertiserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAutoSignupEnabled", reflect.TypeOf((*MockAutoSignupSessionRepository)(nil).IsAutoSignupEnabled), guildID, advertiserID)
}

// MockDelayedMessageRepository is a mock of DelayedMessageRepository interface.
type MockDelayedMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDelayedMessageRepositoryMockRecorder
}

// MockDelayedMessageRepositoryMockRecorder is the mock recorder for MockDelayedMessageRepository.
type MockDelayedMessageRepositoryMockRecorder struct {
	mock *MockDelayedMessageRepository
}

// NewMockDelayedMessageRepository creates a new mock instance.
func NewMockDelayedMessageRepository(ctrl *gomock.Controller) *MockDelayedMessageRepository {
	mock := &MockDelayedMessageRepository{ctrl: ctrl}
	mock.recorder = &MockDelayedMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelayedMessageRepository) EXPECT() *MockDelayedMessageRepositoryMockRecorder {
	return m.recorder
}

// DeleteDelayedMessage mocks base method.
func (m *MockDelayedMessageRepository) DeleteDelayedMessage(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDelayedMessage", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDelayedMessage indicates an expected call of DeleteDelayedMessage.
func (mr *MockDelayedMessageRepositoryMockRecorder) DeleteDelayedMessage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDelayedMessage", reflect.TypeOf((*MockDelayedMessageRepository)(nil).DeleteDelayedMessage), id)
}

// FlagDelayedMessageAsSent mocks base method.
func (m *MockDelayedMessageRepository) FlagDelayedMessageAsSent(message *repository.DelayedMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlagDelayedMessageAsSent", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlagDelayedMessageAsSent indicates an expected call of FlagDelayedMessageAsSent.
func (mr *MockDelayedMessageRepositoryMockRecorder) FlagDelayedMessageAsSent(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlagDelayedMessageAsSent", reflect.TypeOf((*MockDelayedMessageRepository)(nil).FlagDelayedMessageAsSent), message)
}

// GetDelayedMessages mocks base method.
func (m *MockDelayedMessageRepository) GetDelayedMessages() ([]*repository.DelayedMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelayedMessages")
	ret0, _ := ret[0].([]*repository.DelayedMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelayedMessages indicates an expected call of GetDelayedMessages.
func (mr *MockDelayedMessageRepositoryMockRecorder) GetDelayedMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelayedMessages", reflect.TypeOf((*MockDelayedMessageRepository)(nil).GetDelayedMessages))
}

// InsertDelayedMessage mocks base method.
func (m *MockDelayedMessageRepository) InsertDelayedMessage(delayedMessage *repository.DelayedMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDelayedMessage", delayedMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDelayedMessage indicates an expected call of InsertDelayedMessage.
func (mr *MockDelayedMessageRepositoryMockRecorder) InsertDelayedMessage(delayedMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDelayedMessage", reflect.TypeOf((*MockDelayedMessageRepository)(nil).InsertDelayedMessage), delayedMessage)
}
